P:can be solved in polynomial time.
NP:cannot ne solved in polynomial time but verified in polynomial time.
NP-hard:A problem is NP-hard if an algorithm for solving it can be translated into one for solving any NP-problem (nondeterministic polynomial time) problem.
NP-hard therefore means "at least as hard as any NP-problem," although it might, in fact, be harder.
NP-complete:A is in NP, and for all NP problems B, B is polynomial-time many-one reducible to A.
So, what makes NP-Complete so interesting is that if any one of the NP-Complete problems was to be solved quickly, then all NP problems can be solved quickly.
B=PmA :B is polynomially reduicble to A.

http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/NP-CompleteSet.png

The P versus NP problem is a major unsolved problem in computer science. Informally speaking, it asks whether every problem whose solution can be quickly verified by a computer can also be quickly solved by a computer.


--------------------------------------------------------------------------------------------------------------------------------------------
While calculating the complexity of recursive algorithms, for the term T(n/k) , it is not necessary to equate n/k to 1 . We can equate to to 2,3,4 or some other smaller constant.
While solving output for recursion questions,make a tree like structure
Master method doesnt work if the polynomial term is negative.
Reducible to master method
A polynomial cannot have fractional powers

